---
import { getCollection, getEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

// Get the slug from the URL
export async function getStaticPaths() {
  const products = await getCollection('products');

  return products.map(product => ({
    params: { slug: product.slug },
    props: { product },
  }));
}

const { product } = Astro.props;
const { title, description, imageSrc, price, category } = product.data;

// Render the product's content
const { Content } = await product.render();
---

<Layout title={title} description={description}>
  <div class="breadcrumb">
    <a href="/">Home</a> &gt;
    {category && <a href={`/${category}`}>{category.charAt(0).toUpperCase() + category.slice(1)}</a>}
    {category && <span> &gt; </span>}
    <span>{title}</span>
  </div>

  <div class="product-detail-container">
    <div class="product-image">
      <img src={imageSrc} alt={title} />
    </div>

    <div class="product-info">
      <h1>{title}</h1>
      <p class="product-description">{description}</p>

      {price && (
        <p class="product-price">${price.toFixed(2)}</p>
      )}

      {category && (
        <p class="product-category">Category: {category}</p>
      )}

      <div class="product-content">
        <Content />
      </div>

      <div class="product-actions">
        <button class="btn btn-primary checkout-btn">Checkout Now</button>
        <button class="btn btn-secondary cart-btn">Add to Cart</button>
      </div>
    </div>
  </div>
</Layout>

<style>
  .breadcrumb {
    max-width: 1200px;
    margin: 1rem auto 0;
    padding: 0 1rem;
    font-size: 0.9rem;
  }

  .breadcrumb a {
    color: #4a6cf7;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .product-detail-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    max-width: 1200px;
    margin: 1rem auto;
    padding: 0 1rem;
  }

  .product-image {
    width: 100%;
    border-radius: 8px;
    overflow: hidden;
  }

  .product-image img {
    width: 100%;
    height: auto;
    object-fit: cover;
  }

  .product-info {
    display: flex;
    flex-direction: column;
  }

  h1 {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  .product-description {
    font-size: 1.1rem;
    color: #666;
    margin-bottom: 1.5rem;
  }

  .product-price {
    font-size: 1.5rem;
    font-weight: bold;
    color: #333;
    margin-bottom: 1rem;
  }

  .product-category {
    font-size: 0.9rem;
    color: #666;
    margin-bottom: 1.5rem;
  }

  .product-content {
    margin-bottom: 2rem;
    line-height: 1.6;
  }

  .product-actions {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
  }

  .btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.2s;
  }

  .btn:hover {
    transform: translateY(-2px);
  }

  .btn-primary {
    background-color: #4a6cf7;
    color: white;
  }

  .btn-primary:hover {
    background-color: #3a5ce5;
  }

  .btn-secondary {
    background-color: #f5f5f5;
    color: #333;
  }

  .btn-secondary:hover {
    background-color: #e0e0e0;
  }

  @media (min-width: 768px) {
    .product-detail-container {
      grid-template-columns: 1fr 1fr;
      padding: 0 2rem;
    }
  }
</style>

<script>
  // Client-side JavaScript for button functionality
  document.addEventListener('DOMContentLoaded', () => {
    const checkoutBtn = document.querySelector('.checkout-btn');
    const cartBtn = document.querySelector('.cart-btn');

    if (checkoutBtn) {
      checkoutBtn.addEventListener('click', () => {
        alert('Proceeding to checkout...');
        // Here you would typically redirect to a checkout page
        // window.location.href = '/checkout';
      });
    }

    if (cartBtn) {
      cartBtn.addEventListener('click', () => {
        alert('Product added to cart!');
        // Here you would typically add the product to a cart
        // This could involve updating a cart count in the UI
        // and storing the cart data in localStorage or similar
      });
    }
  });
</script>
