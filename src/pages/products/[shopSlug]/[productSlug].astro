---
import Layout from '../../../layouts/Layout.astro';
import { getPrintifyData, getPrintifyProducts } from '../../../lib/printify';
import ImageSlider from '../../../components/ImageSlider.vue';
import ProductOptions from '../../../components/ProductOptions.vue';

const toSlug = (str) => str.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '');

// This function runs once at build time to build ALL product pages
export async function getStaticPaths() {
  console.log("Fetching all products to build static pages...");
  const shopsResponse = await getPrintifyData();
  const allPaths = [];

  if (shopsResponse.success) {
    for (const shop of shopsResponse.data) {
      // For a static site, we fetch all pages of products for each shop
      let currentPage = 1;
      let lastPage = 1;
      do {
        const productsResponse = await getPrintifyProducts(shop.id, currentPage);
        if (productsResponse.success) {
          for (const product of productsResponse.products) {
            allPaths.push({
              params: {
                shopSlug: toSlug(shop.title),
                productSlug: toSlug(product.title),
              },
              props: { product }, // Pass the full product data as a prop
            });
          }
          lastPage = productsResponse.lastPage;
        }
        currentPage++;
      } while (currentPage <= lastPage);
    }
  }

  console.log(`Generated ${allPaths.length} total product pages.`);
  return allPaths;
}

const { product } = Astro.props;
---

<Layout title={product ? product.title : 'Product'}>
  <div class="product-detail-container">
    {product ? (
        <div class="product-layout">
          <div class="product-images">
            {product.images.length > 1 ? (
                <ImageSlider client:load images={product.images} />
            ) : (
                <img src={product.images[0]?.src} alt={product.title} class="single-image" />
            )}
          </div>
          <div class="product-info">
            <h1>{product.title}</h1>
            <div class="description" set:html={product.description}></div>
            <ProductOptions client:load product={product} />
          </div>
        </div>
    ) : (
        <p class="error-message">Could not find product details. This page may not have been built correctly.</p>
    )}
  </div>
</Layout>

<style>
  .product-detail-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 2rem;
  }
  .product-layout {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  @media (min-width: 768px) {
    .product-layout {
      grid-template-columns: 1fr 1fr;
    }
  }
  .single-image {
    width: 100%;
    border-radius: 8px;
    border: 1px solid #eee;
  }
  .product-info h1 {
    margin-top: 0;
    font-size: 2.5rem;
  }
  .description {
    line-height: 1.6;
    margin-bottom: 2rem;
  }
  .description :global(p) {
    margin: 0 0 1em;
  }
  .error-message {
    text-align: center;
    color: red;
    padding: 2rem;
  }
</style>